{"pages":[],"posts":[{"title":"Programming Language 101","text":"what’s programming language, and why? x Language Best readability / syntax / paradigm speed / resource ratio ecosystem, community learning curve debug fault tolerance, scalability, concurrency modularity platform use case state of tech stack functional, oop, procedural/imperative debunk myths jvm/beam, GC, JIT, memory layout why learn 69 languages thinking in different paradigm &amp; perspective for beginners","link":"/2020/04/02/Programming-Language-101/"},{"title":"esoteric programming language (esolang)","text":"আমরা কম বেশি সবাই C, python, C#, java ব্লা ব্লা ব্লা প্রোগ্রামিং ল্যাংগুয়েজের নাম শুনেছি। কিন্তু এগুলা বাদে আরো হাজারের উপরে প্রোগ্রামিং ল্যাংগুয়েজ আছে যা প্রোগ্রামাররা শুধু “proof of concept” হিসাবে বানায় যেগুলা ডেভেলপাররা কোনদিন সফ্টওয়্যার বানাতে ব্যবহার করেনা। কিন্তু ল্যাংগুয়েজ গুলা জাদুঘরে সাজায়ে রাখার মতন। কয়েকটার উদাহরন দেই: brainfuck: এইটাই ল্যাঙ্গুয়েজ টার নাম। যেই ল্যাংগুয়েজের সিন্টেক্সে শুধু ৮ টা ক্যারেক্টার &lt;&gt;+-.,[] ছাড়া আর সব কিছু অর্থহীন। 12++++++++++[&gt;+++++++&gt;++++++++++&gt;+++&lt;&lt;&lt;-]&gt;++.&gt;+.+++++++..+++.&gt;++.&lt;&lt;+++++++++++++++.&gt;.+++.------.--------.&gt;+. এই সুন্দর দেখতে জিনিসটার আউটপুট “Hello World!” :3 Piet: এর সিন্টেক্সের জন্যে আছে 18 টা রং। হ্যা রং! কোন ক্যারেক্টার না। এর উদাহরন স্ক্রিনশটে দেয়া আছে। এইখানে আরো স্যাম্পল দেয়া আছে। whitespace: এই ল্যাংগুয়েজ দেখা যায়না। দেখবেন কিভাবে? এর সিন্টেক্স হিসাবে আছে ট্যাব(Tab), স্পেস(space), newline যা সিলেক্ট করে হাইলাইট না করলে বুঝাই যাবেনা কিছু লিখা আছে কিনা :3 LOLCODE: উদাহরন দেই আগে 1234HAI 1.2CAN HAS STDIO?VISIBLE &quot;HAI WORLD!&quot;KTHXBYE এইখানে প্রথম লাইনে ভার্শন নাম্বার বলে দিতেছে। এইখানে HAI মানে আসলে “Hi!” :pSTDIO লাইব্রেরির নাম। যারা C তে কোড লিখছেন তারা বুঝছেন কি করা হইছে এখানেKTHBYE মানে ok thanks bye :v Malbolge: এই ল্যাংগুয়েজ এতই অদ্ভুত যে এর ক্রিয়েটর জীবনে একবারো এই জিনিস দিয়ে প্রোগ্রাম করেনি। উদাহরন: 1(=&lt;`#9]~6ZY32Vx/4Rs+0No-&amp;Jk)&quot;Fh}|Bcy?`=*z]Kw%oG4UUS0/@-ejc(:&apos;8dc যা “Hello World!” প্রিন্ট করবে -_- INTERCAL: “Compiler Language With No Pronounceable Acronym” এইটা একেবারে প্রথম দিকের esoteric language. এর ছোট্ট একটা hello world প্রোগ্রামের সাইজ 16 লাইন। তাই আর দিলাম না :3 Monkeys: এই ল্যাঙ্গুয়েজে ৭ টা বানর থাকবে, যাদের ১-৭ এর মধ্যে নাম্বার দেয়া থাকবে। বানর গুলাকে কিছু কাজ দেয়া হবে। আর পুরো প্রোগ্রামে ১৪ টা কলা থাকবে। কলা ছাড়া বানর কাজ করবে কেনো? :v আর এই কলা+বানর 10 * 10 একটা গ্রিডে সাজানো থাকবে। বানর গুলাকে কাজ দেয়া আর পুরো প্রোগ্রাম লিখতে এই কিওয়ার্ড গুলা ব্যবহার হয়। NOP, UP, DOWN, LEFT, RIGHT, LEARN, YELL, PLAY, SLEEP, WAKE, GRAB, DROP, EAT, MARK, BACK, TEACH, FIGHT, BOND, EGO, END। দেখেই বুঝতেছেন কি ধরনের অমানবিক(!) কাজ বানর দিয়ে করানো হয়। উদাহরন হিসাবে এই প্রোগ্রামটা দেখুন: 12341 MARK1 LEARN1 YELL1 BACK এখানে ১ নাম্বার বানর কে তার পজিশন মনে রাখতে বলতেছে -&gt; MARKকন্সোল থেকে ইউজারের থেকে ইনপুট জানতে বলতেছে -&gt; LEARNযা জানলো তা বলতে বলতেছে -&gt; YELLযেই পজিশন প্রথম লাইনে মনে রাখছিল সেই যায়গায় ফেরত যেতে বলতেছে -&gt; BACKIn a bananshell, প্রোগ্রামটা ইউজারের কাছ থেকে যা ইনপুট নিতেছে তাই আউটপুট দিচ্ছে। এই লিস্টে 1104 টা esoteric language এর বৈশিষ্ট্য + উদাহরন দেয়া আছে। ঘুম হারাম করতে না চাইলে দেখার দরকার নাই :3 :p","link":"/2017/05/06/esoteric-programming-language-esolang/"},{"title":"library-less node config & secrets management","text":"use bash script; instead of dotenv dependencymake ./bin/export.sh with: 12345678910#!/usr/bin/env bashDOT_ENV=\"$1\"EXEC=${@:2}set -asource $DOT_ENVset +a$EXEC now to use this with nodemon: 12345678910111213141516171819{ \"delay\": 0, \"verbose\": true, \"watch\": [ \"src\" ], \"ignore\": [ \"**/*.spec.ts\", \"**/*.test.ts\", \".git\", \"**/node_modules\" ], \"env\": { \"nodemon\": 1, \"DEBUG\": \"*\" }, \"exec\": \"npm run build &amp;&amp; ./bin/export.sh .env npm start\", \"ext\": \"js,json,ts\"} ignore other attributes. see how ./bin/export.sh .env is used in exec value. but, don’t forget to chmod +x ./bin/export.sh this only works on linux (&amp; probably on mac) not recommended for use with docker. you would use docker/k8s secrets or other methods anyway ¯\\(ツ)/¯ use centralized config file; instead of node-config dependency1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071import crypto from 'crypto';const { NODE_ENV = 'production' } = process.env;const isDev = NODE_ENV === 'development';// safe for all environmentconst safeDefs: NodeJS.ProcessEnv = { PORT: '4000',};// safe defaults for production environmentconst prodDefs: NodeJS.ProcessEnv = { ...safeDefs };// safe defaults for development environmentconst devDefs: NodeJS.ProcessEnv = { ...safeDefs, REDIS_CONNECTION_STRING: 'redis://redis', PG_CONNECTION_STRING: 'postgres://postgres:password@postgres/nobinalo', ES_NODE: 'http://elasticsearch:9200', EMAIL_VERIFICATION_SECRET: crypto.randomBytes(48).toString('base64'), PHONE_NO_VERIFICATION_SECRET: crypto.randomBytes(48).toString('base64'), AUTH_JWT_SECRET: crypto.randomBytes(33).toString('base64'),};const env = new Proxy(process.env, { get: (env, key: string): string =&gt; { const value = env[key]; const devValue = devDefs[key]; const prodValue = prodDefs[key]; if (value) return value; if (isDev &amp;&amp; devValue) return devValue; if (!isDev &amp;&amp; prodValue) return prodValue; throw new Error(`Environment Variable '${key}' is missing!`); },}) as Record&lt;string, string&gt;;const { PG_CONNECTION_STRING, REDIS_CONNECTION_STRING, SENDGRID_API_KEY, PORT, EMAIL_VERIFICATION_SECRET, PHONE_NO_VERIFICATION_SECRET, AUTH_JWT_SECRET, ES_NODE,} = env;const config = { isDev, NODE_ENV, SECRETS: { EMAIL_VERIFICATION_SECRET, PHONE_NO_VERIFICATION_SECRET, AUTH_JWT_SECRET, }, PORT, knex: { connection: PG_CONNECTION_STRING, }, redis: { REDIS_CONNECTION_STRING }, elasticsearch: { node: ES_NODE, }, sendgrid: { SENDGRID_API_KEY, },};export default config; usage: 12345import config from '../config';const { redis: { REDIS_CONNECTION_STRING },} = config; this will, fail in production mode use ‘redis://redis’ in development mode if REDIS_CONNECTION_STRING env variable is not set.","link":"/2020/02/12/library-less-node-config-secrets-management/"},{"title":"swap, zram, zswap, random linux stuffs","text":"context: Linux Bangladesh facebook group swap, swapfile, zswap, zramর‍্যাম যতই হোক, almost-always-add-swap-space - https://haydenjames.io/linux-performance-almost-always-add-swap-space/ কিন্তু কত GB? hibernate (suspend on disk) ফিচার চাইলে র‍্যামের সাইজ + ১ জিবি যদি হাইবারনেট করার চিন্তা ভাবনা না থাকে: hdd হইলে: দরকার নাই (পরে কাহিনী খুলে বলতেছি) ssd হইলে: 1 GB ক্যামনে বানাবো?12345$ sudo su$ dd if=/dev/zero of=/swapfile1 bs=1G count=&lt;swap_size&gt;$ chown root:root /swapfile1; chmod 0600 /swapfile1$ mkswap /swapfile1; swapon /swapfile1$ echo &quot;/swapfile1 none swap sw 0 0&quot; &gt;&gt; /etc/fstab explanation: 1) switch to root user, 2) হিউজ একখান ফাইল, যাতে কোনো হোল নাই -_- replace &lt;swap_size&gt; with যত জিবি সোয়াপ চান (ex: 1,2,3…) 3) set permission for the file 4) file টাকে সোয়াপ হিসাবে ব্যবহার উপযোগী করার জন্যে 5) swapfile টা প্রতি স্টার্টাপে অটোম্যাটিকালি সোয়াপ হিসাবে মাউন্ট করার জন্যে… zswap, zram কিতা?সোয়াপ আসলে কি হয়? &quot;memory pages which are hardly ever used&quot; তো সেই মেমোরি swapfile এ না রেখে মেমোরীতেই কম্প্রেস কইরা রাখলেই তো হয় 🤔 সুবিধা? hdd/ssd র‍্যামের থেকে অনেকটা স্লো। হার্ডলি এভার ইউজ্ড মানেতো এই না যে কখনোই ব্যবহার হবেনা? আর যদি র‍্যাম অনেকটা ব্যবহার হয়ে যায়, তখন যাস্ট কিছুটা কম ব্যবহার হইতেছে এমন মেমোরীও সোয়াপ হয়ে যাইতে পারে। কম্প্রেস করে র‍্যামেই রেখে দিলে ram এর একটা অংশ সোয়াপ স্টোরেজের মত কাজ করতেছে 😌 zswap, zram এর কাহিনী ইহাই :)zswap কম্প্রেস করে মেমোরিতেই রাখতেছে, কিন্তু যখন মেমোরিও ফুল হয়ে যাওয়া শুরু করবে, মেমোরিতে কম্প্রেস হওয়া ডাটা আসল সোয়াপ স্টোরেজে মুভ করা শুরু করবে…zram এর ক্ষেত্রে মুভের কোনো কাহিনী নাই :) বাকিসব zswap এর মতই। তো zram এর সাথে swapfile/partition রেখে লাভ নাই। তো কখন কোনটা? zram or zwap?hdd হইলে যাস্ট zram. ssd হইলে zswap 👌এর জন্যেই একেবারে প্রথমে বলছিলাম hdd তে swap এর দরকার নাই। কিন্তু ক্যামনে?একেক ডিস্ট্রোতে একেকভাবে zram, zwap enable করে। manjaro, pop_os এই দুইটার টা কমেন্টে দিতেছি personal preference: distro: manjaro kdepackage manager: snap -&gt; flatpak -&gt; pacman -&gt; yayterminal emulator: অনেক অনেক ঘুরাঘুরির পর kitty ( https://github.com/kovidgoyal/kitty ) তে শান্তি পাইলাম.config: https://gist.github.com/audacioustux/4967b2c6d25a004c394455a95f676508 (follow the README file)shell: zsh with starship config: ^terminal editor: emacs with spacemacsconfig: https://gist.github.com/audacioustux/1d4aea266047e3efec5f4796441ae1af tools: ripgrep (like grep): https://github.com/BurntSushi/ripgrepbat (like cat): https://github.com/sharkdp/batfkill: https://github.com/sindresorhus/fkill-clifd (like find): https://github.com/sharkdp/fdag(like ack): https://github.com/ggreer/the_silver_searcher","link":"/2019/12/30/swap-zram-zswap-random-linux-stuffs/"},{"title":"পয়েন্টার নিয়া কিছু পয়েন্টি পয়েন্ট","text":"nibba =&gt; Vai ekta help koren,pointer er concept clear korte ki korte pari?jotheto pera khaitesi eta niye le_me =&gt; আচ্ছা পয়েন্টার নিয়া কিছু পয়েন্টি পয়েন্ট বলি…. ১. পয়েন্টার বা এড্রেস মেমোরির একটা সিঙ্গেল বাইট কে রেফার করে… শুধু এবং শুধুমাত্র byte, not bit… ২. আমরা যেসব ডাটা-টাইপ ইউজ করি কোডের ভেতর (int, float, bool) এগুলা সব শুধু এবং শুধুমাত্র কম্পাইলারের বুঝার জন্যে লিখি. কম্পাইলার যখন এসেমব্লি কোড জেনারেট করতেছে তখন এই ডাটা টাইপগুলা অনুযায়ী কোড জেনারেট করে. এসেমব্লি তে ডাটাটাইপ বলতে তেমন কিছু নাই… তো তুমি যখন বলতেছো int i = 69, তখন এসেমব্লি কোড টা এমনভাবে জেনারেট হইতেছে যাতে 69 ভ্যালুটা 4 বাইটে রাইট হয়. আর রিড করার সময়ও 4 বাইট রিড করে.তো এর জন্যে আমাদের পয়েন্টার ভ্যারিয়বলেরও ডাটা টাইপ বলে দেয়া লাগে… নাইলে কম্পাইলার বুঝবে ক্যামনে ঐ এড্রেসের পর কতগুলা বাইট রিড করা লাগবে? ৩. পয়েন্টার আর রেফারেন্সের ভেতর কয়েকটা ডিফরেন্স আছে… পয়েন্টার ভ্যারয়েবল মেমোরি এড্রেস স্টোর করে… রেফারেন্স ভ্যারেয়বল যাস্ট alias.. মানে এটা এক্সিস্টিং কোনো ভ্যারেয়বল রে রেফার করে… যেহেতু এইটা কোনো এড্রেস ভ্যালুনা, রেফারেন্সের সাথে + - অপারেটর দিয়া কাজ করা যায়না. একটা এক্সাম্পল দেই বিষয়টার… ধরো একটা array… int a[] = {4,5,8}; Cout &lt;&lt; a;প্রিন্ট করবে a array এর ফার্স্ট বাইট… a[2] যদি এক্সেস করতে চাই তাইলে আমরা মূলত *(a+2) এক্সেস করতেছি… মানে a যাস্ট একটা পয়েন্টার স্টোর করতেছে… যার সাথে আমরা যোগ বিয়োগ করে মেমোরির একেকটা জায়গা এক্সেস করতে পারতেছি… কিন্তু রেফারেন্সের ক্ষেত্রে কিন্তু তা হয়না…int *a; আর int &amp;a কিন্তু সেইম না আমরা ফাংশন প্যারামিটারে অনেকসময় function blabla(int *a) এইভাবে পয়েন্টার ইউজ করি… এইটা আসলে আইডিয়াল ওয়ে না… পয়েন্টার বা রেফারেন্স ভ্যারিয়েবল আর *, &amp; অপারেটর কিন্তু এক জিনিস না nibba =&gt; *a 1D অ্যারে এর ক্ষেত্রে first element টা কে পয়েন্ট করবে,direct ভ্যালু টা।আর &amp;a অ্যাড্রেস টা,right? le_me =&gt; yape","link":"/2020/02/21/%E0%A6%AA%E0%A7%9F%E0%A7%87%E0%A6%A8%E0%A7%8D%E0%A6%9F%E0%A6%BE%E0%A6%B0-%E0%A6%A8%E0%A6%BF%E0%A7%9F%E0%A6%BE-%E0%A6%95%E0%A6%BF%E0%A6%9B%E0%A7%81-%E0%A6%AA%E0%A7%9F%E0%A7%87%E0%A6%A8%E0%A7%8D%E0%A6%9F%E0%A6%BF-%E0%A6%AA%E0%A7%9F%E0%A7%87%E0%A6%A8%E0%A7%8D%E0%A6%9F/"},{"title":"50 shades of computer science","text":"context: AIUB Course Solution group skill development vs CGPA…কনট্রাভার্শাল টপিক যেহেতু, ছোট কইরা বলি, সফ্টওয়্যার ফার্মগুলাতে সিজিপিএ, ভার্সিটির নামের দাম এখন অনেকটা কমে গেছে, পুরাতন HR সিস্টেম গুলা বাদে। সিজিপিএ চাইলে কারিকুলামের জিনিসগুলা ভালোভাবে না বুঝেও বাড়ানো যায়। কিন্তু স্কিল ডেভেলপমেন্টে you have to learn, explore, prove your skill, আর এগুলা আপনি আপনার নিজ তাগিদে করতেছেন। তবে স্কিল ডেভেলপমেন্ট আর ভার্সিটির কারিকুলাম মোটেও সাংঘর্ষিক না। সিএস কোর্স গুলাতে ভালো করলে আর অন্য কোর্স গুলা ক্লাসে এটেন্ড থেকে ফলো করলে সিজি 3.5 এর কাছাকাছি অন্তত রাখা যায়। দিন শেষে আপনার ঠিকই কোর্স গুলার জন্যে টাকা খরচ করতে হইতেছে আর দিনের বেশিরভাগ সময় ভার্সিটির জন্যে খরচ করতে হইতেছে। তো এই সময়টা ভালোভাবে ইউটিলাইজ করাই ভালোনা? এমন তো না আপনি ক্লাসে ল্যাপটপ নিয়ে gitHUB ব্রাউজ করতে পারবেন… so better invest that time… কারন আমরা ম্যাথ, EEE এর সাবজেক্ট গুলাকে অপ্রয়োজনীয় মনে করলেও এর মাহাত্ব জায়গা মত ঠিকি বুঝবেন, ট্রাস্ট মি অন দিস 🙂 competitive programming নাকি development 🤔এইটার উত্তরে কোনোরকম ঘাপলা হইলে গর্দান যাবে। তবে একটা ছোট্ট কিউট কাহিনী দিয়া শুরু করি, সেকেন্ড সেমিস্টারে ডাটা স্ট্রাকচার ল্যাবে কোনো এক সিনিয়র ভাই-এর সাথে কথোপকথন: ভাই: আপনি কোড প্রাক্টিস করেন তাইনা? সব পারেন দেখি আমি: blush না আমি আগে থেকেই কোডিং করি অল্পস্বল্প ভাই: আপনার UVa তে স্কোর কতো? আমি: blush with ಠ_ಠ না মানে আমার আসলে ১৬’ এর পর কনটেস্ট বা প্রবলেম সলভিং তেমন একটা আর করা হয়না। আপাতত ডেভেলপমেন্টের কাজ কাম করি। ভাই: _ওসব ডেভেলপমেন্ট দিয়ে কিছুহয়নারে ভাই_। UVa তে ৫০০ এর উপর স্কোর রাখেন। এখান দিয়ে বের হয়ে 60K এর বেতন নিশ্চিৎ আমি: ও 😐 না মানে আমি… ভাই: ভার্সিটি দিয়ে এরপর java,c#,php কোর্স গুলা পাবেন, ঔখান দিয়েই আপনার ৬-৭ টা প্রোজেক্ট হয়ে যাবে। প্রবলেম সল্ভিং করেন। আপনার স্কিল আছে যেহেতু ওদিকে আগান। ওগুলা প্রথম প্রথম ভালো লাগবে। পরে কোনো কাজে আসবে না। আমি: 😐 আমি স্রিয়াসলি গ্রেটফুল যে সে কথাগুলা বলছে (no sarcasm) বড় ভাইরা নিজেদের ওপিনিয়ন জানাবে ছোটভাইদের ভালোর জন্যে তাই স্বাভাবিক। কিন্তু সমস্যা অন্যজায়গায়, ডেভেলপমেন্টের কি আসলেই কোনো মূল্য নাই? তার আগে ডেভেলপমেন্ট জিনিসটার ডেফিনেশন ক্লিয়ার করি (check wikipedia for official definition) … খুবি জেনারালাইজ ডেফিনেশন বললে এমন কিছুর জন্যে কোড লিখা যার প্রাক্টিকাল ইউসেজ আছে। তা হইতে পারে মোবাইল এপ, গেম, ওয়েবসাইট, কিছু অটোমেট করার জন্যে স্ক্রিপ্ট লিখা বা হতে পারে কোনো লাইব্রেরী, ফ্রেমওয়ার্ক বানানো। মোটামুটি মেইনস্ট্রিম কম্পিটিটিভ প্রোগ্রামিং বাদে সব কিছুই মনে হইতে পারে ডেভেলপমেন্ট। কিন্তু আরো কিছু প্যারাডাইম আছে, ফর এক্সাম্পল ক্রিয়েটিভ প্রোগ্রামিং। ডেভেলপমেন্ট যাস্ট একটা ওয়ার্ড যা অনেক কিছুরে মিন করে। শুধু ওয়েব ডেভেলপমেন্ট না … আমাদের মধ্যে CS সেক্টর নিয়ে অনেক মিথ কাজ করে। তার মধ্যে বড় বড় কম্পানী কম্পিটিটিভ প্রোগ্রামার হায়ার করে (কিছুটা সত্য depends on context) ডেভেলপমেন্ট মানেই কিছু লাইব্রেরী, ফ্রেমওয়ার্ক ধরে ধুপধাপ কিছু বানায়ে ফেলা, বিশেষ করে ওয়েবসাইট বা মোবাইল এপ্লিকেশন বানায়ে ফেলা। প্রথমত সব বড় বড় কম্পানি এই কাজ করতে যায়না। বেশিরভাগ(not surveyed) কম্পানী চায় তারা যেই স্ট্যাকে বা যেই টেকনোলজিগুলা নিয়া কাজ করতেছে ওগুলাতে কাজ করা স্কিল্ড পার্সন। সিজিপিএ, সিপি-এর গুরুত্ব আসে তার পরে। তবে, তারপরো প্রোগ্রামিং শুরু করার জন্যে কম্পিটিটিভ প্রোগ্রামিং (সিপি) প্রেফার করা হয় কারন এর গাইডলাইন খুব সহজ সরল। আপনি যেকোনো একটা অনলাইন জাজ (hackerrank.com, uva.onlinejudge.org, codeforces.com, codesignal.com ব্লা ব্লা) এ ঢুকে এক টানা প্রবলেম শল্ভ করতে থাকবেন, নতুন নতুন এলগোরিদম শিখতে থাকবেন, কোনো সমস্যায় পরলে যে জানে তারে জিজ্ঞাস করবেন। তবে সবচেয়ে বড় বিষয়… এগুলা করতে গিয়া প্রোগ্রাম্যাটিকালি চিন্তা করতে শিখবেন। এমন না যে ডেভেলপমেন্টে এগুলা হয়না। “কম্পিটিটিভ প্রোগ্রামার রা সহজেই সব কিছু শিখে নিতে পারে” এই কথাটারে ৩ নাম্বার মিথ বলা যায়। খুবি খাপছাড়া কথাবার্তা। ডেভেলপমেন্ট যেই ধরনেরই হোক, ডিজাইন প্যাটার্ন, এন্টি-প্যাটার্ন, সিস্টেম ডিজাইন কম বেশি জানা লাগবে। দুই জায়গাতেই কোনো একটা প্রবলেম শল্ভ করা লাগতেছে। দুই জায়গাতেই গভীর জিনিসপত্র আছে যা চাইলেই যখন ইচ্ছা বুঝা সম্ভব না। তবে প্রোগ্রামিং শুরু করার জন্যে ডেভেলপমেন্ট খুব একটা সুবিধার না। এর গাইডলাইন অত জেনারালাইজ ভাবে দেয়া যায়না। কারন, একটু আগে যেটা বললাম, ডেভেলপমেন্ট অনেক বড় একটা স্কোপ। আরো দুইটা মিথ: সিপিতে ম্যাথ লাগে, ডেভেলপমেন্টে লাগেনা? যান একটু গ্রাফিক্স প্রোগ্রামিং বা AI, ML ঘেটে আসেন। সিপিতে এলগোরিদম লাগে ডেভেলপমেন্টে লাগেনা? ওঁ আচ্ছা #understandable 🙂 আমি এইখানে কোনো সেক্টর বা প্যারাডাইম কেই ছোটো করিনাই, করতে চাইনাই। কারন প্রোগ্রামিং একটা ভালোবাসা &lt;3 যে যেমনে চায় ভালোবাসুক 🙂কম্পিটিটিভ প্রোগ্রামিং লেস কনফিউজিং নতুনদের জন্যে। আসেপাশে অনেক কমিউনিটি পাবেন এর জন্যে। AIUB তেই ACM এর জন্যে বেশ ভালো একটা কমিউনিটি আছে। চাইলে ঔখান দিয়ে প্রোগ্রামিং এর শুরুটা করতে পারেন। কিন্তু কম্পিটিটিভ প্রোগ্রামিং-ই একমাত্র এন্ট্রি পয়েন্ট না। অনেকটা সেইফ পয়েন্ট বলা যাইতে পারে। কারন ডেভেলপমেন্টের ক্ষেত্রে নতুনরা কিছু রিপিটিটিভ কাজ বারবার করে মনে করে তাদের এক্সপেরিয়েন্স বাড়তেছে। এমন আরো কিছু ডিলেমা কাজ করে। প্রোপার গাইডলাইন + মাইন্ডসেট ছাড়া এই এন্ট্রি পয়েন্ট দিয়ে না ঢোকাই ভালো.. পরে ঢুকেন, সময় আছেতো 🙂 একটু আগে ক্রিয়েটিভ প্রোগ্রামিং এর কথা বলছিলাম। বিষয়টা নিয়া আইডিয়া নিতে https://github.com/terkelg/awesome-creative-coding এইখান দিয়ে ঘুরে আসতে পারেন। তবে আপনি যদি বেশ কয়েকমাষ হয়ে গেছে সিপি করতেছেন টাইপের হয়ে থাকেন ডেভেলপমেন্টের দিকে এক্সপ্লোর করতে পারেন। ডেভেলপারদের ক্ষেত্রেও vice-versa … কিপ লার্নিং নিউ থিংস। একটা করতেছেন বলে আরেকটা করা যাবেনা এমন না। এসেমব্লি লেভেলের বা লো লোভেলের জিনিসপাতি কি শিখার দরকার আছে?একটু আগে যেইটা বললাম আরকি, CS একটা ভালোবাসা। ভালোবাসতে চাইলে তার ভালো-খারাপ সবটুকুকে ভালোবাসতে হবে 🙂 ( #ফ্লার্টবার্তা :’3 ) লো লেভেলের জিনিসগুলা একটু রসকষহীন। ওগুলা জেনে হয়ত মানুষকে দেখানোর মত কিছু বানাতে পারবেন না। কিন্তু Assembly programmers are the only programmers who can truly claim to be the masters, and that’s a truth worth meditating on - jeff duntemann উক্তিটারে খুব বেশি সিরিয়াসলি নেয়ার দরকার নাই। কিন্তু এর জিস্ট টা উপলব্ধি করা দরকার। লো লেভেল জিনিসগুলা, ফান্ডামেন্টাল কনসেপ্ট অফ কম্পিউটেশন না জানলে সার্টিফিকেট যত দামীই হোক, নিজেরে আত্ববিশ্বাসের সঙ্গে কম্পিউটার ইন্জিনিয়ার হিসাবে হয়ত পরিচয় দিতে পারবেন না। কম্পিউটার সায়েন্স অনেক মোভনীয় মসলা মাখানো একটা সাবজেক্ট। এখন ইহা জাতীয় সাবজেক্ট। বেশিরভাগ সময় জিনিসটা খুব সহজ হিসাবে নতুনদের কাছে উপস্থাপন করা হয়। না… মোটেও সহজ না। it’s a wild roller coaster 🙂 কিপ লার্নিং, তা নিজের ভালো লাগার জন্যে হোক, বা চাকরির বাজারে নিজেকে তৈরী রাখতে। ফ্রেমওয়ার্ক, লাইব্রেরী সবাই চাইলেই ডকুমেন্টেশন ঘেটে শিখতে পারে… যে জিনিসগুলা অন্যরা ভয় পেয়ে শিখতে চায়না consider learning them too, if that makes you a better programmer and makes you higher than average… #KTHXBYE 🙂","link":"/2019/08/01/50-shades-of-computer-science/"},{"title":"একগাদা লার্নিং রিসোর্স, কিছু র‍্যান্ডম, তিক্ত এবং সোলাইমানী কথাবার্তা","text":"context: AIUB Course Solution group ফার্স্ট সেমিস্টার থেকে ক্লাসমেট বা জুনিয়রদের ভার্সিটি সিলেবাসের বাইরে কিছু শিখার জন্যে ঘুতাইতেছি। দুয়েকজন শুনতেছে যারা তাদের যতদূর সম্ভব হেল্প করার চেষ্টা করি। ৮ বছর ধরে নিজে যে সেক্টরে কাজ করে আসতেছি সেখানে অন্যদের আগ্রহ দেখতে ভালো লাগে আরকি। CS সেক্টরে প্রচুর শাখা প্রশাখা আছে। কোনটাতে আপনার ভালোলাগা কাজ করে তা আপনার নিজের খুজে বের করা লাগবে। আর তার জন্যে আপনার কয়েকটা CS এর শাখা-প্রশাখা নিয়ে ঘুতাঘুতি করা লাগবে, অল্পস্বল্প জ্ঞান থাকা লাগবে। আর এই ঘুতাঘুতির শুরুটা ভার্সিটির এই ৩-৪ বছরের মধ্যে যত দ্রুত শুরু করবেন, আপনার জন্যেই ভালো। যেকোনো কিছু দিয়ে শুরু করেন। তা হতে পারে ওয়েব ডেভেলপমেন্ট, অনলাইন জাজ-এ প্রবলেম সল্ভিং অথবা অন্য যেকোনো কিছু দিয়ে। কিন্তু বসে থাকিয়েন না;সাথে ভার্সিটির কারিকুলাম ফলো করতে থাকেন। ভার্সিটির কোর্স আপনাকে হাতে-কলমে যা শিখাবে তার খুবি নগন্য অংশ আপনার আসলেই কাজে লাগবে। কিন্তু এই কারিকুলাম অনেকগুলা CS সেক্টর কভার করে। যা আগেই বললাম, আপনাকে আপনার ভালো লাগার জায়গাটা খুজে পেতে সাহায্য করবে। সিজি ভালো রাখবো নাকি স্কিল ডেভেলপ করবো এই প্রশ্ন অর্থহীন। আপনি যদি বুঝে ভার্সিটির কোর্স গুলা শেষ করেন আপনার স্কিল তাতেও ডেভেলপ হচ্ছে। এত শাখা প্রশাখার ভেতর দিয়ে কোনটা দিয়ে শুরু করবেন চিন্তায় থাকলে চোখের সামনে যেটা প্রথমে আসতেছে সেটা দিয়ে শুরু করে দিন। যতদিন ধরে কোন এডিটর ভালো, কোন ল্যাঙ্গুয়েজ ভালো এসব চিন্তা করতে থাকবেন আপনার ৩ বছরের সময় লিমিট ততদিনে শেষ হয়ে যাবে। তো অন্তত শুরু করেন। ভার্সিটির এসাইনমেন্ট গুলা করতে ভালো না লাগলেও নিজে করেন। কমফোর্ট জোনে থাকার চেষ্টা করিয়েন না সবসময় বাংলা টিউটোরিয়াল খোজা থেকে বিরত থাকেন DONT GET ISOLATED মিটআপ, সেমিনার, কমিউনিকেশন স্কিল এগুলার আলাদা গুরুত্ব আছে code everyday… নিজের প্রোগ্রেস মনিটর করতে গিটহাবে প্রতিদিন কোড আপলোড করতে পারেন, তা যতটুক কোডই হোক। read books; listen to audio books and podcasts, including the non-CS ones; learn how to learn new things, how to use a search engine or use an operating system as a tool সম্ভব হলে একটা ট্যাব কিনে নেন পিডিএফ পড়ার জন্যে https://www.amazon.com/Amazon-Fire-HD-10-Inch-Tablet-32GB-Black/dp/B01J6RPGKG “try to Learn something about everything and everything about something” – Thomas Huxley কোডিং রিলেটেড কথাবার্তার জন্যে telegram group টেলিগ্রাম গ্রুপটা খোলা হলো। মোবাইলে telegram অ্যাপ টা ইন্সটল করে কোনো প্রশ্ন থাকলে করতে পারেন বা অন্যদের সাথে কথাবার্তা বলতে পারেন। একগাদা রিসোর্স… Computer Fundamental:শুরু: https://www.youtube.com/watch?v=tpIctyqH29Q&amp;list=PL8dPuuaLjXtNlUrzyH5r6jN9ulIgZBpdoComputer Architecture: (skip if u want)শুরু: https://www.amazon.com/Computer-Systems-Programmers-Perspective-3rd/dp/013409266X (this book is freaking awesome &lt;3 ) বই কিনার টাকা না থাকলে http://gen.lib.rus.ec/ টাকা হলে কিনিয়েন 🙂Programming Fundamental:C++ or python:C++:শুরু: https://www.youtube.com/watch?v=vLnPwxZdW4Y better: https://www.youtube.com/watch?v=18c3MTX0PK0&amp;list=PLlrATfBNZ98dudnM48yfGUldqGD0S4FFb advance: https://www.youtube.com/watch?v=mUQZ1qmKlLY&amp;t=8113s বই: how to program c++ by dietel Python:শুরু: https://www.youtube.com/watch?v=rfscVS0vtbwor: https://docs.python-guide.org/ বই: python 101 and 201 by mike driscoll Algorithms:শুরু: https://www.youtube.com/watch?v=0IAPZzGSbME&amp;list=PLDN4rrl48XKpZkf03iYFl-O29szjTrs_Oor: https://www.geeksforgeeks.org বই: CLRS or grokking Tools &amp; IDEs: vscode, github Web DevelopmentOverview: https://www.youtube.com/watch?v=i4laq6e_B6UFrontendHTML:শুরু: https://www.codecademy.com/learn/learn-htmlবা https://www.youtube.com/watch?v=pQN-pnXPaVgবাংলায়: https://www.youtube.com/watch?v=gjVvFd0bv6s CSS:শুরু: https://www.youtube.com/watch?v=ieTHC78giGQjavascript:শুরু: https://www.youtube.com/watch?v=PkZNo7MFNFgreact or vue: (কনফিউশন থাকলে রিয়েক্ট)react শুরু: https://reactjs.org/tutorial/tutorial.html then: https://nextjs.org/learn/basics/getting-started vue শুরু: https://vuejs.org/v2/guide/ then: https://nuxtjs.org/guide/installation Designing:খাতা-পেনসিল(মেকানিকাল), ভেক্টর গ্রাফিক্স/svg(illustrator/inkscape/gravit) শুরু: https://www.youtube.com/watch?v=_Hp_dI0DzY4বই: https://refactoringui.com/book/ Libraries &amp; Tools: bulma, babel, typescriptBackend- python/django or nodejs/express or php/laravel:django:শুরু: https://www.youtube.com/watch?v=rfscVS0vtbw then: https://www.youtube.com/watch?v=F5mRW0jo-U4 then: https://docs.djangoproject.com/en/2.2/intro/tutorial01/ laravel:শুরু: https://www.youtube.com/watch?v=OK_JCtrrv-c then: https://www.youtube.com/watch?v=EU7PRmCpx-0&amp;list=PLillGF-RfqbYhQsN5WMXy6VsDMKGadrJ- express:শুরু: https://www.youtube.com/watch?v=L72fhGm1tfE then MERN(MongoDB, Express, React, Node.js): https://www.youtube.com/playlist?list=PLillGF-RfqbbiTGgA77tGO426V3hRF9iEor sequelize with postgres: http://docs.sequelizejs.com/or knex + objectionJS Tools &amp; Stack: redis, docker, postgresql, nginx, linuxmobile application development:শুরু: https://flutter.dev/docs/get-started/installgraphics programming (native):With game engine: unity or unreal or other game engineswithout game engine (opengl): https://www.youtube.com/watch?v=W3gAzLwfIP0&amp;list=PLlrATfBNZ98foTJPJ_Ev03o2oq3-GGOS2 graphics programming (web):svg, html canvas, javascriptor (advance): threejs, whitestormjs course: https://www.udacity.com/course/interactive-3d-graphics--cs291computer security/hacking/cracking:শুরু: https://www.youtube.com/watch?v=iyAyN3GFM7A&amp;list=PLhixgUqwRTjxglIswKp9mpkfPNfHkzyeNপ্রোগ্রামিং সহজ, কিন্তু শেখা সময় সাপেক্ষ। ভার্সিটির সিলেবাসের বাইরে কিছু শিখতে কষ্ট হইলে অন্তত ভার্সিটির এসাইনমেন্টগুলা নিজে করেন। don’t let yourself be another “মোবাইলে গানলোডার” 🙂 #KTHXBYE 🙂","link":"/2019/04/05/%E0%A6%8F%E0%A6%95%E0%A6%97%E0%A6%BE%E0%A6%A6%E0%A6%BE-%E0%A6%B2%E0%A6%BE%E0%A6%B0%E0%A7%8D%E0%A6%A8%E0%A6%BF%E0%A6%82-%E0%A6%B0%E0%A6%BF%E0%A6%B8%E0%A7%8B%E0%A6%B0%E0%A7%8D%E0%A6%B8-%E0%A6%95%E0%A6%BF%E0%A6%9B%E0%A7%81-%E0%A6%B0%E2%80%8D%E0%A7%8D%E0%A6%AF%E0%A6%BE%E0%A6%A8%E0%A7%8D%E0%A6%A1%E0%A6%AE-%E0%A6%A4%E0%A6%BF%E0%A6%95%E0%A7%8D%E0%A6%A4-%E0%A6%8F%E0%A6%AC%E0%A6%82-%E0%A6%B8%E0%A7%8B%E0%A6%B2%E0%A6%BE%E0%A6%87%E0%A6%AE%E0%A6%BE%E0%A6%A8%E0%A7%80-%E0%A6%95%E0%A6%A5%E0%A6%BE%E0%A6%AC%E0%A6%BE%E0%A6%B0%E0%A7%8D%E0%A6%A4%E0%A6%BE/"}],"tags":[{"name":"esolang","slug":"esolang","link":"/tags/esolang/"},{"name":"brainfuck","slug":"brainfuck","link":"/tags/brainfuck/"},{"name":"lolcode","slug":"lolcode","link":"/tags/lolcode/"},{"name":"piet","slug":"piet","link":"/tags/piet/"},{"name":"typescript","slug":"typescript","link":"/tags/typescript/"},{"name":"nodeJS","slug":"nodeJS","link":"/tags/nodeJS/"},{"name":"proxy","slug":"proxy","link":"/tags/proxy/"},{"name":"bash","slug":"bash","link":"/tags/bash/"},{"name":"secrets","slug":"secrets","link":"/tags/secrets/"},{"name":"config","slug":"config","link":"/tags/config/"},{"name":"tips","slug":"tips","link":"/tags/tips/"},{"name":"zswap","slug":"zswap","link":"/tags/zswap/"},{"name":"zram","slug":"zram","link":"/tags/zram/"},{"name":"tools","slug":"tools","link":"/tags/tools/"},{"name":"c++","slug":"c","link":"/tags/c/"},{"name":"pointer","slug":"pointer","link":"/tags/pointer/"},{"name":"reference","slug":"reference","link":"/tags/reference/"},{"name":"chit~chat","slug":"chit-chat","link":"/tags/chit-chat/"},{"name":"academia","slug":"academia","link":"/tags/academia/"},{"name":"competitive programming","slug":"competitive-programming","link":"/tags/competitive-programming/"},{"name":"development","slug":"development","link":"/tags/development/"},{"name":"resource","slug":"resource","link":"/tags/resource/"}],"categories":[{"name":"programming","slug":"programming","link":"/categories/programming/"},{"name":"nodeJS","slug":"nodeJS","link":"/categories/nodeJS/"},{"name":"linux","slug":"linux","link":"/categories/linux/"},{"name":"cpp","slug":"programming/cpp","link":"/categories/programming/cpp/"},{"name":"esolang","slug":"programming/esolang","link":"/categories/programming/esolang/"},{"name":"typescript","slug":"nodeJS/typescript","link":"/categories/nodeJS/typescript/"},{"name":"জ্ঞানবার্তা","slug":"জ্ঞানবার্তা","link":"/categories/%E0%A6%9C%E0%A7%8D%E0%A6%9E%E0%A6%BE%E0%A6%A8%E0%A6%AC%E0%A6%BE%E0%A6%B0%E0%A7%8D%E0%A6%A4%E0%A6%BE/"},{"name":"academic","slug":"জ্ঞানবার্তা/academic","link":"/categories/%E0%A6%9C%E0%A7%8D%E0%A6%9E%E0%A6%BE%E0%A6%A8%E0%A6%AC%E0%A6%BE%E0%A6%B0%E0%A7%8D%E0%A6%A4%E0%A6%BE/academic/"}]}